//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public DungeonMapComponent dungeonMap { get { return (DungeonMapComponent)GetComponent(ComponentIds.DungeonMap); } }
        public bool hasDungeonMap { get { return HasComponent(ComponentIds.DungeonMap); } }

        public Entity AddDungeonMap(Entitas.Entity[,] newBoard) {
            var component = CreateComponent<DungeonMapComponent>(ComponentIds.DungeonMap);
            component.Board = newBoard;
            return AddComponent(ComponentIds.DungeonMap, component);
        }

        public Entity ReplaceDungeonMap(Entitas.Entity[,] newBoard) {
            var component = CreateComponent<DungeonMapComponent>(ComponentIds.DungeonMap);
            component.Board = newBoard;
            ReplaceComponent(ComponentIds.DungeonMap, component);
            return this;
        }

        public Entity RemoveDungeonMap() {
            return RemoveComponent(ComponentIds.DungeonMap);
        }
    }

    public partial class Pool {

        public Entity dungeonMapEntity { get { return GetGroup(Matcher.DungeonMap).GetSingleEntity(); } }
        public DungeonMapComponent dungeonMap { get { return dungeonMapEntity.dungeonMap; } }
        public bool hasDungeonMap { get { return dungeonMapEntity != null; } }

        public Entity SetDungeonMap(Entitas.Entity[,] newBoard) {
            if(hasDungeonMap) {
                throw new EntitasException("Could not set dungeonMap!\n" + this + " already has an entity with DungeonMapComponent!",
                    "You should check if the pool already has a dungeonMapEntity before setting it or use pool.ReplaceDungeonMap().");
            }
            var entity = CreateEntity();
            entity.AddDungeonMap(newBoard);
            return entity;
        }

        public Entity ReplaceDungeonMap(Entitas.Entity[,] newBoard) {
            var entity = dungeonMapEntity;
            if(entity == null) {
                entity = SetDungeonMap(newBoard);
            } else {
                entity.ReplaceDungeonMap(newBoard);
            }

            return entity;
        }

        public void RemoveDungeonMap() {
            DestroyEntity(dungeonMapEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherDungeonMap;

        public static IMatcher DungeonMap {
            get {
                if(_matcherDungeonMap == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.DungeonMap);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherDungeonMap = matcher;
                }

                return _matcherDungeonMap;
            }
        }
    }
}
